#pragma once
class boolsProxy
{
    unsigned long long* mem;
    const int& index;
    public:
    boolsProxy(unsigned long long* mem,const int& index)
        :mem(mem), index(index) {}
    operator bool()
    {
        return getData();
    }
    bool operator++ ()
    {
        pushData(true);
        return *this;
    }
    bool operator-- ()
    {
        pushData(false);
        return *this;
    }
    bool operator++ (int)
    {
        bool temp = *this;
        pushData(true);
        return temp;
    }
    bool operator-- (int)
    {
        bool temp = *this;
        pushData(false);
        return temp;
    }
    bool flip()
    {
        *mem ^= (long long)1 << index;
        return *this;
    }
    const boolsProxy& operator= (const bool& value)
    {
        pushData(value);
        return *this;
    }
    const bool getData () const
    {
        return (*mem >> index) & 1;
    }
    void pushData(const bool& data)
    {
        *mem = ((*mem & (~((long long)1 << index))) | ((long long)data << index));
    }
};
class sbool
{
    unsigned char mem = 0b0000'0000;
    public:
    sbool(const char& data)
        : mem(data) {}
    sbool() {}
    boolsProxy operator[] (const int& index)
    {
        return boolsProxy((unsigned long long*)&mem, index);
    }
    char length() {return 8;}
    
};
class lbool
{
    unsigned short mem = 0b0000'0000'000'0000;
    public:
    lbool(const short& data)
        : mem(data) {}
    lbool() {}
    boolsProxy operator[] (const int& index)
    {
        return boolsProxy((unsigned long long*)&mem, index);
    }
    char length() {return 16;}
};
class llbool
{
    unsigned int mem = 0b0000'0000'0000'0000'0000'0000'0000'0000;
    public:
    llbool(const int& data)
        : mem(data) {}
    llbool() {}
    boolsProxy operator[] (const int& index)
    {
        return boolsProxy((unsigned long long*)&mem, index);
    }
    char length() {return 32;}
};
class ulbool
{
    unsigned long long mem = 0b0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000'0000;
    public:
    ulbool(const long long& data)
        : mem(data) {}
    ulbool() {}
    boolsProxy operator[] (const int& index)
    {
        return boolsProxy((unsigned long long*)&mem, index);
    }
    char length() {return 64;}
};
